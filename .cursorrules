# Browser Agent MCP - Cursor Rules

## Project Overview

This is a comprehensive browser automation MCP (Model Context Protocol) that combines navigation automation with Chrome DevTools access. The project enables AI agents to interact with existing Chrome browser instances through a Chrome extension and MCP server architecture.

**Architecture**: AI Agent → MCP Server → Chrome Extension → Web Pages

## Core Technologies

- **MCP Server**: TypeScript/Node.js with @modelcontextprotocol/sdk
- **Chrome Extension**: Manifest V3, TypeScript, Chrome APIs
- **Communication**: Native messaging between extension and MCP server
- **DevTools**: Chrome DevTools Protocol for advanced browser control

## Development Phases

1. **Phase 1** (Weeks 1-2): Chrome extension structure, MCP server, MVP features
2. **Phase 2** (Weeks 3-4): Navigation automation, form interactions
3. **Phase 3** (Weeks 5-6): Advanced DevTools integration
4. **Phase 4** (Weeks 7-8): Performance optimization, error handling
5. **Phase 5** (Weeks 9-10): Documentation, testing, deployment

## Coding Standards

### TypeScript/JavaScript

- Use TypeScript for all new code
- Always use arrow functions
- Use import rather than require
- Prefer `const` over `let`, avoid `var`
- Use async/await over Promises.then()
- Implement proper error handling with try/catch blocks
- Use meaningful variable and function names
- Add JSDoc comments for public APIs
- Follow ESLint and Prettier configurations
- Where possible use module pattern rather than write JavaScript classes
- Use Tailwind for any webpage styling
- Always declare the type of each variable and function (parameters and return value)
- Avoid using `any` or `unknown` - look for definitions in the codebase
- Create necessary types

### Package Management

- This project uses pnpm and corepack
- Use pnpm for all package management operations
- Leverage corepack for consistent package manager versions

### File Organization

```
src/
├── extension/          # Chrome extension code
│   ├── manifest.json
│   ├── background/     # Service worker
│   ├── content/        # Content scripts
│   └── popup/          # Extension popup
├── server/             # MCP server code
│   ├── index.ts        # Main server entry
│   ├── tools/          # MCP tool implementations
│   └── types/          # TypeScript type definitions
└── shared/             # Shared utilities and types
```

### Chrome Extension Guidelines

- Use Manifest V3 specifications
- Implement proper permission requests (minimal necessary permissions)
- Use chrome.storage.local for persistent data
- Handle extension lifecycle events properly
- Implement proper content script injection strategies
- Use chrome.runtime.sendMessage for communication

### MCP Server Guidelines

- Implement all MCP protocol methods properly
- Use proper error codes and messages
- Validate all input parameters
- Implement rate limiting for browser operations
- Log all operations for debugging
- Handle browser connection failures gracefully

### Security Considerations

- Validate all data from web pages before processing
- Sanitize user inputs to prevent injection attacks
- Use Content Security Policy in extension
- Implement proper origin validation
- Handle sensitive data (cookies, localStorage) carefully
- Never expose internal APIs to web pages

### Error Handling

- Always wrap browser operations in try/catch blocks
- Provide meaningful error messages to users
- Log errors with sufficient context for debugging
- Implement retry logic for transient failures
- Handle browser disconnection gracefully
- Validate browser state before operations

### Performance Guidelines

- Minimize DOM queries and cache results when possible
- Use efficient selectors (prefer IDs over complex CSS selectors)
- Implement debouncing for frequent operations
- Clean up event listeners and observers
- Optimize content script injection timing
- Monitor memory usage in long-running operations

### Testing Approach

- Write unit tests for utility functions
- Create integration tests for MCP tools
- Test extension functionality across different websites
- Validate error handling scenarios
- Test browser compatibility (Chrome versions)
- Performance testing for large DOM operations

## Key Implementation Notes

### DOM Access Patterns

```typescript
// Prefer this pattern for DOM operations
const element = await waitForElement(selector, { timeout: 5000 });
if (element) {
  // Perform operation
} else {
  throw new Error(`Element not found: ${selector}`);
}
```

### Error Response Format

```typescript
// Consistent error response format
{
  success: false,
  error: {
    code: 'ELEMENT_NOT_FOUND',
    message: 'Could not find element with selector: #submit-btn',
    details: { selector: '#submit-btn', timeout: 5000 }
  }
}
```

### Chrome Extension Communication

```typescript
// Use this pattern for extension messaging
chrome.runtime.sendMessage(
  {
    type: "DOM_QUERY",
    payload: { selector, action },
  },
  (response) => {
    if (chrome.runtime.lastError) {
      // Handle connection errors
    }
    // Process response
  }
);
```

## Development Workflow

1. Always test changes in a real Chrome browser
2. Test on multiple websites to ensure compatibility
3. Validate MCP protocol compliance
4. Check extension permissions are minimal
5. Test error scenarios and edge cases
6. Update documentation for new features

## Common Pitfalls to Avoid

- Don't assume DOM elements exist without checking
- Don't perform blocking operations in content scripts
- Don't store sensitive data in extension storage
- Don't ignore Chrome extension lifecycle events
- Don't make assumptions about page load timing
- Don't forget to handle browser tab/window changes

## Debugging Guidelines

- Use chrome://extensions for extension debugging
- Enable Developer mode for detailed error logs
- Use Chrome DevTools for content script debugging
- Log MCP server operations with timestamps
- Test with various website types (SPA, traditional, etc.)
- Monitor browser console for JavaScript errors

## Dependencies Management

- Keep dependencies minimal and well-maintained
- Regularly update security-sensitive packages
- Document any peer dependencies clearly
- Use exact versions for critical dependencies
- Test compatibility after dependency updates

## Senior TypeScript Programming Guidelines

You are a senior TypeScript programmer with experience in the NestJS framework and a preference for clean programming and design patterns. Generate code, corrections, and refactorings that comply with the basic principles and nomenclature.

### TypeScript General Guidelines

#### Basic Principles

- Use English for all code and documentation
- Always declare the type of each variable and function (parameters and return value)
  - Avoid using any
  - Create necessary types
- Use JSDoc to document public classes and methods
- Don't leave blank lines within a function
- One export per file

#### Nomenclature

- Use PascalCase for classes
- Use camelCase for variables, functions, and methods
- Use kebab-case for file and directory names
- Use UPPERCASE for environment variables
  - Avoid magic numbers and define constants
- Start each function with a verb
- Use verbs for boolean variables. Example: isLoading, hasError, canDelete, etc.
- Use complete words instead of abbreviations and correct spelling
  - Except for standard abbreviations like API, URL, etc.
  - Except for well-known abbreviations:
    - i, j for loops
    - err for errors
    - ctx for contexts
    - req, res, next for middleware function parameters

#### Functions

- In this context, what is understood as a function will also apply to a method
- Write short functions with a single purpose. Less than 20 instructions
- Name functions with a verb and something else
  - If it returns a boolean, use isX or hasX, canX, etc.
  - If it doesn't return anything, use executeX or saveX, etc.
- Avoid nesting blocks by:
  - Early checks and returns
  - Extraction to utility functions
- Use higher-order functions (map, filter, reduce, etc.) to avoid function nesting
  - Use arrow functions for simple functions (less than 3 instructions)
  - Use named functions for non-simple functions
- Use default parameter values instead of checking for null or undefined
- Reduce function parameters using RO-RO
  - Use an object to pass multiple parameters
  - Use an object to return results
  - Declare necessary types for input arguments and output
- Use a single level of abstraction

#### Data

- Don't abuse primitive types and encapsulate data in composite types
- Avoid data validations in functions and use classes with internal validation
- Prefer immutability for data
  - Use readonly for data that doesn't change
  - Use as const for literals that don't change

#### Classes

- Follow SOLID principles
- Prefer composition over inheritance
- Declare interfaces to define contracts
- Write small classes with a single purpose
  - Less than 200 instructions
  - Less than 10 public methods
  - Less than 10 properties

#### Exceptions

- Use exceptions to handle errors you don't expect
- If you catch an exception, it should be to:
  - Fix an expected problem
  - Add context
  - Otherwise, use a global handler

#### Testing

- Follow the Arrange-Act-Assert convention for tests
- Name test variables clearly
  - Follow the convention: inputX, mockX, actualX, expectedX, etc.
- Write unit tests for each public function
  - Use test doubles to simulate dependencies
    - Except for third-party dependencies that are not expensive to execute
- Write acceptance tests for each module
  - Follow the Given-When-Then convention

### Specific to NestJS

#### Basic Principles

- Use modular architecture
- Encapsulate the API in modules

  - One module per main domain/route
  - One controller for its route
    - And other controllers for secondary routes
  - A models folder with data types
    - DTOs validated with class-validator for inputs
    - Declare simple types for outputs
  - A services module with business logic and persistence
    - Entities with MikroORM for data persistence
    - One service per entity

- Common Module: Create a common module (e.g., @app/common) for shared, reusable code across the application

  - This module should include:
    - Configs: Global configuration settings
    - Decorators: Custom decorators for reusability
    - DTOs: Common data transfer objects
    - Guards: Guards for role-based or permission-based access control
    - Interceptors: Shared interceptors for request/response manipulation
    - Notifications: Modules for handling app-wide notifications
    - Services: Services that are reusable across modules
    - Types: Common TypeScript types or interfaces
    - Utils: Helper functions and utilities
    - Validators: Custom validators for consistent input validation

- Core module functionalities:
  - Global filters for exception handling
  - Global middlewares for request management
  - Guards for permission management
  - Interceptors for request processing

#### Testing

- Use the standard Jest framework for testing
- Write tests for each controller and service
- Write end to end tests for each api module
- Add a admin/test method to each controller as a smoke test
